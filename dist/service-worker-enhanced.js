importScripts("https://storage.googleapis.com/workbox-cdn/releases/6.6.1/workbox-sw.js");const CACHE_NAME="story-app-v1",RUNTIME_CACHE="runtime-cache-v1",OFFLINE_DATA_CACHE="offline-data-v1";if(workbox){console.log("✅ Full Offline Workbox loaded"),workbox.core.skipWaiting(),workbox.core.clientsClaim();const e=[{url:"/",revision:"1"},{url:"/index.html",revision:"2"},{url:"/app.bundle.js",revision:"3"},{url:"/app.css",revision:"4"},{url:"/manifest.json",revision:"5"},{url:"/favicon.png",revision:"6"},{url:"/favicon-192.png",revision:"7"},{url:"/favicon-512.png",revision:"8"},{url:"/#/",revision:"9"},{url:"/#/about",revision:"10"},{url:"/#/add",revision:"11"},{url:"/#/login",revision:"12"},{url:"/#/register",revision:"13"}];console.log("📦 Full offline precaching",e.length,"files"),workbox.precaching.precacheAndRoute(e),workbox.routing.registerRoute(/^https:\/\/story-api\.dicoding\.dev\/v1\/stories/,new workbox.strategies.NetworkFirst({cacheName:"stories-cache",networkTimeoutSeconds:3,plugins:[new workbox.expiration.ExpirationPlugin({maxEntries:50,maxAgeSeconds:86400}),{cacheWillUpdate:async({response:e})=>200===e.status?e:null,cacheKeyWillBeUsed:async({request:e})=>`${e.url}?offline=true`}]})),workbox.routing.registerRoute(/^https:\/\/story-api\.dicoding\.dev\/v1\/(login|register)/,new workbox.strategies.NetworkOnly({plugins:[{handlerDidError:async()=>new Response(JSON.stringify({error:!0,message:"Authentication requires internet connection"}),{status:503,headers:{"Content-Type":"application/json"}})}]})),workbox.routing.registerRoute(/^https:\/\/story-api\.dicoding\.dev\/v1\/stories\/[^/]+$/,new workbox.strategies.NetworkFirst({cacheName:"story-details-cache",networkTimeoutSeconds:3,plugins:[new workbox.expiration.ExpirationPlugin({maxEntries:100,maxAgeSeconds:604800})]})),workbox.routing.registerRoute(/\.(?:png|jpg|jpeg|svg|gif|webp)$/,new workbox.strategies.CacheFirst({cacheName:"image-cache",plugins:[new workbox.expiration.ExpirationPlugin({maxEntries:100,maxAgeSeconds:2592e3})]})),workbox.routing.registerRoute(/\.(?:js|css)$/,new workbox.strategies.StaleWhileRevalidate({cacheName:"static-resources"})),workbox.routing.registerRoute(/^https:\/\/fonts\.(googleapis|gstatic)\.com/,new workbox.strategies.CacheFirst({cacheName:"google-fonts",plugins:[new workbox.expiration.ExpirationPlugin({maxEntries:30,maxAgeSeconds:31536e3})]})),workbox.routing.registerRoute(/^https:\/\/cdnjs\.cloudflare\.com/,new workbox.strategies.CacheFirst({cacheName:"cdn-cache",plugins:[new workbox.expiration.ExpirationPlugin({maxEntries:50,maxAgeSeconds:2592e3})]})),workbox.routing.registerRoute((({request:e})=>"navigate"===e.mode),new workbox.strategies.NetworkFirst({cacheName:"pages-cache",networkTimeoutSeconds:3,plugins:[{cacheKeyWillBeUsed:async()=>"/index.html",handlerDidError:async()=>caches.match("/index.html")}]})),console.log("✅ Full offline Workbox routing configured")}else{console.error("❌ Workbox failed - implementing comprehensive fallback");const e=["./","./index.html","./app.bundle.js","./app.css","./manifest.json","./favicon.png","./favicon-192.png","./favicon-512.png"];self.addEventListener("install",(o=>{console.log("Installing comprehensive offline SW..."),o.waitUntil(Promise.all([caches.open(CACHE_NAME).then((o=>Promise.all(e.map((e=>o.add(e).catch((o=>(console.warn(`Failed to cache: ${e}`,o),Promise.resolve())))))))),caches.open(OFFLINE_DATA_CACHE).then((e=>e.put("/offline-stories",new Response(JSON.stringify({error:!1,message:"success",listStory:[{id:"offline-1",name:"Offline Story",description:"This story is available offline",photoUrl:"/favicon-192.png",createdAt:(new Date).toISOString(),lat:null,lon:null}]}),{headers:{"Content-Type":"application/json"}}))))]).then((()=>self.skipWaiting())))})),self.addEventListener("activate",(e=>{e.waitUntil(Promise.all([caches.keys().then((e=>Promise.all(e.map((e=>{if(![CACHE_NAME,RUNTIME_CACHE,OFFLINE_DATA_CACHE].includes(e))return caches.delete(e)}))))),self.clients.claim()]))})),self.addEventListener("fetch",(e=>{if("GET"!==e.request.method)return;const o=new URL(e.request.url);o.hostname.includes("dicoding.dev")?e.respondWith(fetch(e.request).then((o=>{if(o.ok){const t=o.clone();caches.open(RUNTIME_CACHE).then((o=>{o.put(e.request,t)}))}return o})).catch((()=>o.pathname.includes("/stories")?caches.match("/offline-stories"):new Response(JSON.stringify({error:!0,message:"Offline mode - limited functionality"}),{headers:{"Content-Type":"application/json"}})))):o.origin===self.location.origin&&e.respondWith(caches.match(e.request).then((o=>o||fetch(e.request).then((o=>{if(o.ok){const t=o.clone();caches.open(RUNTIME_CACHE).then((o=>{o.put(e.request,t)}))}return o})).catch((()=>"navigate"===e.request.mode?caches.match("/index.html"):new Response("Offline",{status:503}))))))}))}async function syncOfflineStories(){try{const e=await caches.open("offline-forms"),o=await e.keys();for(const t of o){const o=await e.match(t),n=await o.json();try{await fetch("/api/stories",{method:"POST",body:JSON.stringify(n),headers:{"Content-Type":"application/json"}}),await e.delete(t),console.log("Synced offline story:",n.title)}catch(e){console.log("Sync failed, keeping offline:",e)}}}catch(e){console.error("Sync process failed:",e)}}self.addEventListener("sync",(e=>{"offline-story-sync"===e.tag&&e.waitUntil(syncOfflineStories())})),self.addEventListener("message",(e=>{if(e.data&&"STORE_OFFLINE_FORM"===e.data.type){const o=e.data.payload;caches.open("offline-forms").then((e=>{e.put(`/offline-form-${Date.now()}`,new Response(JSON.stringify(o),{headers:{"Content-Type":"application/json"}}))})),"serviceWorker"in navigator&&"sync"in window.ServiceWorkerRegistration.prototype&&navigator.serviceWorker.ready.then((e=>e.sync.register("offline-story-sync")))}if(e.data&&"SHOW_NOTIFICATION"===e.data.type){const{title:o,options:t}=e.data.payload;e.waitUntil(self.registration.showNotification(o,t))}})),self.addEventListener("push",(e=>{const o=e.data?e.data.json():{},t=o.title||"Story berhasil dibuat",n={body:o.options?.body||"Anda telah membuat story baru",icon:"./favicon.png",badge:"./favicon.png",tag:"story-notification",renotify:!0,requireInteraction:!0,data:{url:o.url||"/"}};e.waitUntil(self.registration.showNotification(t,n))})),self.addEventListener("notificationclick",(e=>{e.notification.close();const o=e.notification.data?.url||"/";e.waitUntil(clients.matchAll({type:"window",includeUncontrolled:!0}).then((e=>{for(let t=0;t<e.length;t++){const n=e[t];if(n.url===o&&"focus"in n)return n.focus()}if(clients.openWindow)return clients.openWindow(o)})))}));